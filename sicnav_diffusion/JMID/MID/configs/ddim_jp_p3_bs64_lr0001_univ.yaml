seed: 0
method: mid_jp # mid or cnf or mid_jp or cnf_jp
eval_mode: True # False # True #  False # True # False # True # False  # True (evaluation) or False (training)
time: False  # time generating a single set of predictions for a single timestep on average
fast_train: True
maximum_history_length: 7
prediction_horizon: 12

############ Dataset #############
data_dir: processed_data  # path to directory with pkl files
dataset: univ  # name of the data files and model name; data used for training
inference_dataset: univ  # name of the data files to do inference on; "dataset" is just used to provide ground truth agent IDs when saving trajectories; inference will only be done on this dataset
regenerate_indexes: True  # if True, data indexes are regenerated and saved in data_dir. This should be done any time the data is updated. If False, data indexes are loaded from the saved indexes

############ Model #############
diffnet: JointPredictionTransformerConcatLinear
encoder_dim: 256
tf_layer: 3
load_chkpt: None

############ Training #############
lr: 0.0001
epochs: 1000
early_stopping: False
batch_size: 64
eval_batch_size: 1
k_eval: 25  # number of samples from latent distribution of Trajectron++ CVAE to use
eval_every: 5 # 2 # 5 # 3 # 1

############ Testing #############
test_split: test  # train, val, test
num_samples: 20  # number of sample to generate for evaluation
eval_at: 80  # epoch to evaluate at
eval_timesteps: 1 # number of timesteps to evaluate in a batch; automatically set to 1 if "time" is True or if "with_constraints" is true (if method is cnf); default is 10
save_trajectories: False  # save predictions on the evaluation data
num_steps: 2  # number of steps during evaluation (Regarding CFM, 1st step is the sample from the base distribution, so this is really "num_steps - 1" steps. Regarding MID, )
is_eval_hst: False

############ MID Config #############
# These parameters are only used when "method" is mid
# Set to "ddim" to enable fast sampling
sampling: ddim

############ CNF Config #############
# These parameters are only used when "method" is cnf
flow_matcher: CFM  # flow matcher to use: CFM, OTCFM (Optimal Transport CFM)
solver: euler  # euler, dopri5, any other solver the NeuralODE class uses
with_constraints: True
constraint_type: opt_softplus
visualize: True

############### Trajectron++ Config #################
# misc
conf: None
debug: False
preprocess_workers: 0
# model parameters
offline_scene_graph: yes
dynamic_edges: yes
edge_state_combine_method: sum
edge_influence_combine_method: attention
edge_addition_filter: [0.25, 0.5, 0.75, 1.0]
edge_removal_filter: [1.0, 0.0]
override_attention_radius: []
incl_robot_node: False
map_encoding: False
augment: True
node_freq_mult_train: False
node_freq_mult_eval: False
scene_freq_mult_train: False
scene_freq_mult_eval: False
scene_freq_mult_viz: False
no_edge_encoding: False
# Data Parameters:
device: cuda
eval_device: None

time: False  # time generating a single set of predictions for a single timestep on average
